# Add required apt repositories
- name: Add latest git repository
  apt_repository:
    repo: "ppa:git-core/ppa"
    update_cache: yes
  become: yes
  when:
    - ansible_facts['distribution'] == "Ubuntu"
    - ansible_facts['distribution_major_version'] == "18"

# Install apt packages
- name: Install common packages for emacs28
  apt:
    name: ['cmigemo', 'silversearcher-ag', 'build-essential', 'texinfo', 'libgnutls28-dev', 'libjpeg-dev', 'libpng-dev', 'libtiff5-dev', 'libgif-dev', 'libxpm-dev', 'libncurses-dev', 'libgtk-3-dev', 'libjansson4', 'libjansson-dev', 'libgccjit0']
    state: present
  become: yes

- name: Install common packages for emacs28 in Debian bullseye
  apt:
    name: ['ripgrep', 'fd-find', 'clangd-11', 'libgccjit-10-dev']
    state: present
  become: yes
  when: ansible_facts['distribution'] == "Debian" and ansible_facts['distribution_major_version'] == "11"

- name: Install common packages for emacs28 in Ubuntu focal
  apt:
    name: ['ripgrep', 'fd-find', 'clangd-11', 'libgccjit-9-dev']
    state: present
  become: yes
  when: ansible_facts['distribution'] == "Ubuntu" and ansible_facts['distribution_major_version'] == "20"

- name: Install common packages for emacs28 in Ubuntu bionic
  apt:
    name: ['clangd-10', 'libgccjit-8-dev']
    state: present
  become: yes
  when:
    - ansible_facts['distribution'] == "Ubuntu"
    - ansible_facts['distribution_major_version'] == "18"

- name: Install latest git with apt
  apt:
    name: git
    state: latest
  become: yes

# Install pip packages
- name: Install cmake language server
  pip:
    executable: pip3
    name: cmake-language-server
  become: yes

- name: Install pyright
  pip:
    executable: pip3
    name: pyright
  become: yes

# Download and install packages not distributed as apt packages
# ripgrep
- name: Download ripgrep .deb
  get_url:
    url: https://github.com/BurntSushi/ripgrep/releases/download/11.0.2/ripgrep_11.0.2_amd64.deb
    dest: "/tmp/ripgrep_11.0.2_amd64.deb"
  when:
    - ansible_facts['distribution'] == "Ubuntu"
    - ansible_facts['distribution_major_version'] == "18"

- name: Install ripgrep .deb
  apt:
    deb: "/tmp/ripgrep_11.0.2_amd64.deb"
  become: yes
  when:
    - ansible_facts['distribution'] == "Ubuntu"
    - ansible_facts['distribution_major_version'] == "18"

# fdfind
- name: Download fd-find .deb
  get_url:
    url: https://github.com/sharkdp/fd/releases/download/v7.4.0/fd_7.4.0_amd64.deb
    dest: "/tmp/fd_7.4.0_amd64.deb"
  when:
    - ansible_facts['distribution'] == "Ubuntu"
    - ansible_facts['distribution_major_version'] == "18"

- name: Install fd-find .deb
  apt:
    deb: "/tmp/fd_7.4.0_amd64.deb"
  become: yes
  when:
    - ansible_facts['distribution'] == "Ubuntu"
    - ansible_facts['distribution_major_version'] == "18"

# Install emacs with native-compile
- name: Install emacs28.1
  block:
    - name: Create ~/.local if needs
      file:
        path: "{{ ansible_env.HOME }}/.local/src"
        state: directory
        recurse: yes
    - name: Unarchive emacs source
      unarchive:
        src: http://ftp.gnu.org/gnu/emacs/emacs-28.1.tar.xz
        dest: "{{ ansible_env.HOME }}/.local/src"
        remote_src: true
    - name: Configure emacs
      shell: >
        ./configure
        --prefix={{ ansible_env.HOME }}/.local
        --with-native-compilation
        --with-json
        --with-gnutls
        --with-cairo
        chdir="{{ ansible_env.HOME }}/.local/src/emacs-28.1"
    - name: Build emacs
      make:
        chdir: "{{ ansible_env.HOME }}/.local/src/emacs-28.1"
    - name: Install emacs
      make:
        chdir: "{{ ansible_env.HOME }}/.local/src/emacs-28.1"
        target: install
 
# Setup Doom Emacs
- name: Setup Doom Emacs
  block:
    - name: Git clone Doom Emacs
      git:
        repo: https://github.com/hlissner/doom-emacs.git
        dest: "{{ ansible_env.HOME }}/.emacs.d/"
        depth: 1
        version: 3f3200f98d4019f78020eeb65e512ce4f5928223
    - name: Create symbolic links for Doom Emacs configs
      file:
        src: "{{ role_path }}/doom/config"
        dest: "{{ ansible_env.HOME }}/.doom.d"
        state: link
    - name: Setup Doom Emacs
      vars:
        doom: "{{ ansible_env.HOME }}/.emacs.d/bin/doom"
      shell: /bin/bash -lc "{{ doom }} install --force && {{ doom }} sync"
