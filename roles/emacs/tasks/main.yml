# Add required apt repositories
- name: Add latest git repository
  apt_repository:
    repo: "ppa:git-core/ppa"
    update_cache: yes
  become: yes
  when:
    - ansible_facts['distribution'] == "Ubuntu"
    - ansible_facts['distribution_major_version'] == "18"

# Install apt packages
- name: Install common packages for emacs28
  apt:
    name: ['cmigemo', 'silversearcher-ag', 'build-essential', 'texinfo', 'libgntls28-dev', 'libjpeg-dev', 'libpng-dev', 'libtiff5-dev', 'libgif-dev', 'libxpm-dev', 'libncurses-dev', 'libgtk-3-dev', 'libjansson4', 'libjansson-dev', 'libgccjit0']
    state: present
  become: yes

- name: Install common packages for emacs28 in latest OS
  apt:
    name: ['ripgrep', 'fd-find', 'clangd-11', 'libgccjit-10-dev']
    state: present
  become: yes
  when: ( ansible_facts['distribution'] == "Ubuntu" and ansible_facts['distribution_major_version'] == "20" )
    or ( ansible_facts['distribution'] == "Debian" and ansible_facts['distribution_major_version'] == "11" )

- name: Install common packages for emacs28 in old OS
  apt:
    name: clangd-10
    state: present
  become: yes
  when:
    - ansible_facts['distribution'] == "Ubuntu"
    - ansible_facts['distribution_major_version'] == "18"

- name: Install latest git with apt
  apt:
    name: git
    state: latest
  become: yes

# Install pip packages
- name: Install cmake language server
  pip:
    executable: pip3
    name: cmake-language-server
  become: yes

- name: Install pyright
  pip:
    executable: pip3
    name: pyright
  become: yes

# Download and install packages not distributed as apt packages
# ripgrep
- name: Download ripgrep .deb
  get_url:
    url: https://github.com/BurntSushi/ripgrep/releases/download/11.0.2/ripgrep_11.0.2_amd64.deb
    dest: "/tmp/ripgrep_11.0.2_amd64.deb"
  when:
    - ansible_facts['distribution'] == "Ubuntu"
    - ansible_facts['distribution_major_version'] == "18"

- name: Install ripgrep .deb
  apt:
    deb: "/tmp/ripgrep_11.0.2_amd64.deb"
  become: yes
  when:
    - ansible_facts['distribution'] == "Ubuntu"
    - ansible_facts['distribution_major_version'] == "18"

# fdfind
- name: Download fd-find .deb
  get_url:
    url: https://github.com/sharkdp/fd/releases/download/v7.4.0/fd_7.4.0_amd64.deb
    dest: "/tmp/fd_7.4.0_amd64.deb"
  when:
    - ansible_facts['distribution'] == "Ubuntu"
    - ansible_facts['distribution_major_version'] == "18"

- name: Install fd-find .deb
  apt:
    deb: "/tmp/fd_7.4.0_amd64.deb"
  become: yes
  when:
    - ansible_facts['distribution'] == "Ubuntu"
    - ansible_facts['distribution_major_version'] == "18"

# Install emacs with native-compile
- name: Setup emacs28.1
  block:
  - name: Unarchive emacs source
    src: http://ftp.gnu.org/gnu/emacs/emacs-28.1.tar.xz
    dest: "{{ ansible_env.HOME }}"
  - name: Configure emacs
    shell: >
      ./configure
      --prefix={{ ansible_env.HOME }}/.local
      --with-native-compilation
      --with-json
      --with-gnutls
      --with-cairo
      chdir="{{ ansible_env.HOME }}/emacs-28.1"
  - name: Build emacs
    make:
      chdir: "{{ ansible_env.HOME }}/emacs-28.1"
  - name: Install emacs
    make:
      chdir: "{{ ansible_env.HOME }}/emacs-28.1"
      target: install
 
# Setup Doom Emacs
- name: Git clone Doom Emacs
  git:
    repo: https://github.com/hlissner/doom-emacs.git
    dest: "{{ ansible_env.HOME }}/.emacs.d/"
    depth: 1
    version: 9d4d5b756a8598c4b5c842e9f1f33148af2af8fd

- name: Create symbolic links for Doom Emacs configs
  file:
    src: "{{ role_path }}/doom/config"
    dest: "{{ ansible_env.HOME }}/.doom.d"
    state: link

- name: Setup Doom Emacs
  vars:
    doom: "{{ ansible_env.HOME }}/.emacs.d/bin/doom"
  shell:
    cmd: "{{ doom }} install --force && {{ doom }} sync"
