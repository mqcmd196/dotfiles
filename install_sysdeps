#!/usr/bin/env python3

import apt
import argparse
import distro
import os
import pip
import platform
import subprocess
import yaml as pyyaml

class SysdepsInstaller():
    def __init__(self, yaml_dic):
        self.yaml_dic = yaml_dic
        print("Getting distribution and release...")
        if platform.system() == "Linux":
            if int(platform.python_version_tuple()[1]) >= 8:
                self.system_info = tuple(map(lambda x: x.lower(), distro.linux_distribution()))
            else:
                self.system_info = tuple(map(lambda x: x.lower(), platform.dist()))
            self.distro = self.system_info[0]
            self.codename = self.system_info[2]
            print(f"{Color.YELLOW}Distribution {self.system_info[0]} {self.system_info[2]}{Color.COLOR_DEFAULT}")
            # system_info should be the tuple like ['ubuntu', '20.04', 'focal']
        else:
            raise RuntimeError("Not supported platform {}".format(platform.system))

        self.apt_cache_update();

    def apt_cache_update(self):
        self.apt_cache = apt.cache.Cache()
        self.apt_cache.update()
        self.apt_cache.open()

    def apt_install(self, body):
        if type(body) is not str:
            result1 = subprocess.run(["apt-add-repository", "-y", body.get('add-repository')])
            self.apt_cache_update()
            pkg_name = body.get('name')
        else:
            pkg_name = body
        pkg = self.apt_cache[pkg_name]
        if pkg.is_installed:
            print("{} is already installed via apt".format(pkg_name))
        else:
            pkg.mark_install()
            self.apt_cache.commit()

    def snap_install(self, body):
        result = subprocess.run(["snap", "install", "--classic", body])

    def pip3_install(self, body):
        pip.main(['install', body])

    def install(self, pkg_name):
        if pkg_name in self.yaml_dic:
            commands = self.yaml_dic[pkg_name][self.distro][self.codename]
            if commands.get('apt'):
                self.apt_install(commands.get('apt'))
            elif commands.get('snap'):
                self.snap_install(commands.get('snap'))
            elif commands.get('pip3'):
                self.pip3_install(commands.get('pip3'))

class Color:
	BLACK          = '\033[30m'
	RED            = '\033[31m'
	GREEN          = '\033[32m'
	YELLOW         = '\033[33m'
	BLUE           = '\033[34m'
	MAGENTA        = '\033[35m'
	CYAN           = '\033[36m'
	WHITE          = '\033[37m'
	COLOR_DEFAULT  = '\033[39m'

def main():
    with open(args.yaml) as f:
        yaml_dic = pyyaml.safe_load(f)
    installer = SysdepsInstaller(yaml_dic)
    if args.package:
        installer.install(args.package)
    elif args.recursive:
        with open(args.recursive) as f:
            for line in f:
                installer.install(line)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=
                                     "Install sysdeps via package name or txt file. \
                                     At first, check whether the package can be installed via apt, \
                                     second, check whether the package can be installed via snap, \
                                     at last, check whether the package can be installed via pip.")
    parser.add_argument('-p', '--package', help="Install single package")
    parser.add_argument('-r', '--recursive', help="Install packages with txt file which their names are written in")
    parser.add_argument('-y', '--yaml',
                        help="A yaml config file that the combination of package names, \
                        distribution and commands are written",
                        default=os.path.join(os.environ['HOME'], 'dotfiles', 'packages.yaml'))
    args = parser.parse_args()
    if os.getuid() == 0:
        main()
    else:
        raise RuntimeWarning("Please execute the script as a root user.")
